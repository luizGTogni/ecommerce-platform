generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String   @id @default(uuid())
    name          String
    email         String   @unique
    password_hash String
    created_at    DateTime @default(now())

    session Session[]
    cart    Cart[]
    Payment Payment[]

    @@map("users")
}

model Session {
    id         String   @id @default(uuid())
    user_id    String
    token_hash String   @unique
    expires_at DateTime
    revoked    Boolean  @default(false)
    created_at DateTime @default(now())

    user User @relation(fields: [user_id], references: [id])

    @@map("sessions")
}

model Product {
    id          String  @id @default(uuid())
    title       String
    description String?
    category    String
    price       Decimal
    quantity    Int     @default(0)
    is_active   Boolean @default(true)

    cart_items CartItem[]

    @@map("products")
}

enum CartStatus {
    OPEN
    CANCELED
    COMPLETED
}

model Cart {
    id          String     @id @default(uuid())
    status      CartStatus @default(OPEN)
    finished_at DateTime?
    created_at  DateTime   @default(now())

    user_id String
    user    User   @relation(fields: [user_id], references: [id])

    cart_items CartItem[]
    Payment    Payment[]

    @@map("carts")
}

model CartItem {
    id         String  @id @default(uuid())
    quantity   Int     @default(1)
    unit_price Decimal

    cart    Cart   @relation(fields: [cart_id], references: [id])
    cart_id String

    product    Product @relation(fields: [product_id], references: [id])
    product_id String

    @@map("cart_items")
}

enum PaymentMethod {
    CREDIT_CARD
    PIX
    BOLETO
    PAYPAL
}

enum PaymentStatus {
    PENDING
    APPROVED
    FAILED
    REFUNDED
}

model Payment {
    id             String        @id @default(uuid())
    transaction_id String
    amount         Decimal
    payment_method PaymentMethod
    status         PaymentStatus @default(PENDING)
    paid_at        DateTime?
    refunded_at    DateTime?
    created_at     DateTime      @default(now())
    updated_at     DateTime      @default(now()) @updatedAt

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    cart    Cart   @relation(fields: [cart_id], references: [id])
    cart_id String

    @@map("payments")
}
